# Test Cases for add_integer function

>>> add_integer = __import__('0-add_integer').add_integer

# Test Case 1: Basic addition
>>> add_integer(1, 2)
3

# Test Case 2: Negative numbers
>>> add_integer(100, -2)
98

# Test Case 3: Single argument (b=98)
>>> add_integer(13)
111

# Test Case 4: Floats as arguments
>>> add_integer(100.3, -2)
98

# Test Case 5: String as argument (raises TypeError)
>>> add_integer(4, "Hello")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 22, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer

# Test Case 6: None as argument (raises TypeError)
>>> add_integer(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 20, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

# Test Case 7: Float overflow
>>> add_integer(float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 24, in add_integer
    return int(a) + int(b)
OverflowError: cannot convert float infinity to integer
